#!/usr/bin/env python

import rospy

from people_recognition_2d import PeopleRecognizer2D
from people_recognition_msgs.srv import RecognizePeople2D, RecognizePeople2DResponse

class PeopleRecognition2DNode:
    def __init__(self):

        openpose_srv_name = self._get_param('~openpose_srv_name', "openpose/recognize")
        openface_srv_name = self._get_param('~openface_srv_name', "face_recognition/recognize")
        keras_srv_name = self._get_param('~keras_srv_name', "face_recognition/get_face_properties")
        color_extractor_srv_name = self._get_param('~color_extractor_srv_name', "extract_color")

        self._people_recognizer = PeopleRecognizer2D(openpose_srv_name,
                                                openface_srv_name,
                                                keras_srv_name,
                                                color_extractor_srv_name)

        # Define the service only after PeopleRecognizer2D has initialized
        # completely else an early service call can be made causing errors
        self._detect_people_srv = rospy.Service('detect_people', RecognizePeople2D, self._detect_people_srv)
        rospy.loginfo("PeopleRecognitionNode initialized")

    def _get_param(self, name, default):
        if rospy.has_param(name):
            return rospy.get_param(name)
        else:
            rospy.logwarn('parameter %s not set, using the default value of %s', name, default)
            return rospy.get_param(name, default)

    def _detect_people_srv(self, req):
        """
        Callback when the RecognizePeople2D service is called
        :param req: RecognizePeople2DRequest (with a .image attribute)
        :return: RecognizePeople2DResponse (with a .people attribute)
        """
        rospy.loginfo("Detecting people in incoming Image message...")
        person_2d_array, _ = self._people_recognizer.recognize(req.image)
        rospy.loginfo("Done. Found {} people.".format(len(person_2d_array)))

        return RecognizePeople2DResponse(people=person_2d_array)

if __name__ == '__main__':
    rospy.init_node('people_recognition_2d')
    node = PeopleRecognition2DNode()
    rospy.spin()
    rospy.loginfo("people_recognition_2d node exited")
