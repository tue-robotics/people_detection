#!/usr/bin/env python
from __future__ import print_function
import time
import cv2

import rospy
from cv_bridge import CvBridge, CvBridgeError

from image_recognition_people_detector import PeopleDetector
from image_recognition_msgs.srv import DetectPeople, DetectPeopleResponse

class PeopleDetectionNode:
    def __init__(self):
        self._bridge = CvBridge()

        openpose_srv_prefix = self._get_param('~openpose_srv_prefix', "openpose")
        openface_srv_prefix = self._get_param('~openface_srv_prefix', "openface")
        keras_srv_prefix = self._get_param('~keras_srv_prefix', "keras")
        colour_extractor_srv_prefix = self._get_param('~colour_extractor_srv_prefix', "colour_extractor")

        self._people_detector = PeopleDetector(openpose_srv_prefix,
                                                openface_srv_prefix,
                                                keras_srv_prefix,
                                                colour_extractor_srv_prefix)

        # Define the service only after PeopleDetector has initialized
        # completely else an early service call can be made causing errors
        self._detect_people_srv = rospy.Service('detect_people', DetectPeople, self._detect_people_srv)
        rospy.loginfo("PeopleDetectionNode initialized")

    def _get_param(self, name, default):
        if rospy.has_param(name):
            return rospy.get_param(name)
        else:
            rospy.logwarn('parameter %s not set, using the default value of %s', name, default)
            return rospy.get_param(name, default)

    def _detect_people_srv(self, req):
        """
        Callback when the DetectPeople service is called
        :param req: DetectPeopleRequest (with a .image attribute)
        :return: DetectPeopleResponse (with a .people attribute)
        """
        # Convert to opencv images
        try:
            bgr_image = self._bridge.imgmsg_to_cv2(req.image, "bgr8")
        except CvBridgeError as e:
            raise Exception("Could not convert image to opencv image: %s" % str(e))
        #
        rospy.loginfo("Detecting people in incoming Image message...")
        people, _ = self._people_detector.recognize(req.image)
        rospy.loginfo("Done. Found {} people.".format(len(people)))

        return DetectPeopleResponse(people=people)

if __name__ == '__main__':
    rospy.init_node('people_detection')
    node = PeopleDetectionNode()
    rospy.spin()
    rospy.loginfo("people_detection node exited")
