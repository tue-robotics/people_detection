#!/usr/bin/env python
from __future__ import print_function

import argparse
import time

import cv2
import rospy
from image_recognition_people_detector import PeopleDetector

parser = argparse.ArgumentParser(description='Get people detections')
parser.add_argument('-v', '--verbose', help="Increase output verbosity", action="store_true")

mode_parser = parser.add_subparsers(help='Mode')
image_parser = mode_parser.add_parser('image', help='Use image mode')
image_parser.set_defaults(mode='image')
image_parser.add_argument('image', help='Input image')

cam_parser = mode_parser.add_parser('cam', help='Use cam mode')
cam_parser.set_defaults(mode='cam')
cam_parser.add_argument('--rate', default=3.0, type=float, help='Input image')

args = parser.parse_args()

class PeopleDetectionNode:
    def __init__(self):
        self._people_detector = PeopleDetector()
        self._detect_people_srv = rospy.Service('detect_people', DetectPeople,
                self._detect_people_srv)

        rospy.loginfo("PeopleDetectionNode initialized:")

    def _detect_people_srv(self, req):

if __name__ == '__main__':
    rospy.init_node('people_detection')
    detector = PeopleDetector()

if args.mode == 'image':
    image = cv2.imread(args.image)
    recognitions, overlayed_image = detector.recognize(image)
    rospy.loginfo(recognitions)
    cv2.imshow("overlayed_image", overlayed_image)
    cv2.waitKey()
elif args.mode == 'cam':
    cap = cv2.VideoCapture(0)
    prev = 0
    while not rospy.is_shutdown():

        time_elapsed = time.time() - prev
        res, image = cap.read()

        if time_elapsed > 1. / args.rate:
            prev = time.time()

            recognitions, overlayed_image = detector.recognize(image)
            cv2.imshow("overlayed_image", overlayed_image)

            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

