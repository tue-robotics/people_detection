#!/usr/bin/env python
from __future__ import print_function

import argparse
import time

import cv2
import rospy
from cv_bridge import CvBridge
from image_recognition_people_detector.people_detector import PeopleDetector
from image_recognition_msgs.srv import DetectPeople, DetectPeopleRequest
#from sensor_msgs.msgs import Image

parser = argparse.ArgumentParser(description='Get people detections')
parser.add_argument('-v', '--verbose', help="Increase output verbosity", action="store_true")

mode_parser = parser.add_subparsers(help='Mode')
image_parser = mode_parser.add_parser('image', help='Use image mode')
image_parser.set_defaults(mode='image')
image_parser.add_argument('image', help='Input image')

cam_parser = mode_parser.add_parser('cam', help='Use cam mode')
cam_parser.set_defaults(mode='cam')
cam_parser.add_argument('--rate', default=3.0, type=float, help='Input image')

args = parser.parse_args()

rospy.init_node('get_people_detections')

srv = rospy.ServiceProxy('/detect_people', DetectPeople)
rospy.loginfo("Waiting for service {} ...".format(srv.resolved_name))
srv.wait_for_service()

cv_bridge = CvBridge()

if args.mode == 'image':
    image = cv2.imread(args.image)
    imgmsg = cv_bridge.cv2_to_imgmsg(image, "bgr8")

    for i in range(0, 100):
        resp = srv(DetectPeopleRequest(image=imgmsg))
        rospy.loginfo("Iteration: {}".format(i))

elif args.mode == 'cam':
    print("Nothing to be done. Bye Bye.")
