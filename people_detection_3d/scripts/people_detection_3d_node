#!/usr/bin/env python

# ROS modules
import rospy
import message_filters
from sensor_msgs.msg import Image, CameraInfo

# People detection 3D modules
from people_detection_3d import PeopleDetector3D
from people_detection_3d_msgs.srv import DetectPeople3D, DetectPeople3DResponse
from people_detection_3d_msgs.msg import Person3D


class PeopleDetection3DNode:
    def __init__(self):
        probability_threshold = float(self._get_param('~probability_threshold', 0.2))
        link_threshold = float(self._get_param('~link_threshold', 0.5))
        heuristic = self._get_param('~heuristic', 'shoulder')
        arm_norm_threshold = self._get_param('~arm_norm_threshold', 0.5)
        wave_threshold = self._get_param('~wave_threshold', 0.2)
        vert_threshold = self._get_param('~vert_threshold', 0.7)
        hor_threshold = self._get_param('~hor_threshold', 0.4)
        padding = self._get_param('~padding', 5)

        enable_topic_mode = self._get_param('~enable_topic_mode', False)

        self._people_detector_3d = PeopleDetector3D(probability_threshold,
                link_threshold, heuristic, arm_norm_threshold, wave_threshold,
                vert_threshold, hor_threshold, padding)

        if enable_topic_mode:
            depth_info_sub = message_filters.Subscriber('camera_info', CameraInfo)
            depth_sub = message_filters.Subscriber('depth', Image)
            rgb_sub = message_filters.Subscriber('rgb', Image)

            # self._ts = message_filters.TimeSynchronizer([rgb_sub, depth_sub, depth_info_sub], 1)
            self._ts = message_filters.ApproximateTimeSynchronizer([rgb_sub, depth_sub, depth_info_sub],
                                                                   queue_size=3,
                                                                   slop=10)

            self._ts.registerCallback(self._topic_callback)

        # Define the service only after PeopleDetector has initialized
        # completely else an early service call can be made causing errors
        self._detect_people_3d_srv = rospy.Service('detect_people_3d',
                DetectPeople3D,
                self._detect_people_3d_srv)

        rospy.loginfo("PeopleDetection3DNode initialized:")

    def _get_param(self, name, default):
        if rospy.has_param(name):
            return rospy.get_param(name)
        else:
            rospy.logwarn('parameter %s not set, using the default value of %s', name, default)
            return rospy.get_param(name, default)

    def _detect_people_3d_srv(self, req):
        """
        Callback when the DetectPeople3D service is called
        :param req: DetectPeople3DRequest (with .image_rgb, .image_depth and
            .camera_info_depth attributes)
        :return: DetectPeople3DResponse (with a .people attribute)
        """
        # Convert to opencv images
        rospy.loginfo("Detecting people in 3D from incoming RGB-D image")
        people3d = self._people_detector_3d.recognize(req.image_rgb,
                req.image_depth, req.camera_info_depth)

        return DetectPeople3DResponse(people=people3d)

    def _topic_callback(self, rgb, depth, depth_info):
        rospy.logdebug("_topic_callback called")
        people3d = self._people_detector_3d.recognize(rgb, depth, depth_info)
        print(people3d)

if __name__ == '__main__':
    rospy.init_node('people_detection_3d')
    node = PeopleDetection3DNode()
    rospy.spin()
